// the REPL reads input, sends it to the interpreter for evaluation, prints the result/output of the
// interpreter and starts again. Read, Eval, Print, Loop.

package repl

import (
	"bufio"
	"fmt"
	"io"
	"mooshy/evaluator"
	"mooshy/lexer"
	"mooshy/object"
	"mooshy/parser"
)

const PROMT = ">> "

// need to fix this

const MEOW = `
⠀⠀⠀⠀⠀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⢀⣷⣀⢉⠒⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⣮⠃⠀⠉⢧⠈⠓⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠜⠊⡇⢸⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⡇⠀⠀⠀⠈⠁⢠⠀⢙⣤⣶⣷⣷⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠞⠀⠔⠁⠀⠈⡆⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢠⢨⠀⠀⠀⠀⠀⣠⣾⣿⡻⠿⣥⡍⠙⣿⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠔⠁⠒⠁⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢸⡐⠀⠀⠀⢠⣾⡟⠛⠃⠀⠀⠀⠈⠀⠹⣿⡄⢀⠂⠓⠒⠐⠀⠂⠂⠠⢄⡔⢁⣀⡀⠄⠀⠀⠀⡔⠰⠁⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢸⠂⠀⠀⣰⣿⠛⠀⠀⠀⡐⣀⠀⠀⠈⠀⢿⣷⡈⡄⠀⠀⠀⠀⠀⠀⠀⠀⠉⠀⠀⠈⢤⠀⠀⢠⠹⠀⡇⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢸⠀⠀⠐⠻⠃⠀⠀⠄⠀⠈⠒⠭⣒⢄⡀⠘⣿⣦⢡⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⣃⢔⣗⠂⠀⠀⠀⠀⠀⠀
⠀⠀⠀⢸⠂⠀⠀⠀⠀⠐⠂⠀⠀⠀⠀⠀⠈⠑⠜⠀⢹⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠡⣱⠛⢍⡀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣆⠀⠀⠀⠀⠀⠀⠀⠆⠀⠀⠀⠀⠀⠼⠀⠀⠘⢿⣧⠀⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⢀⠀⠀⠀⠀⣀⣨⣷⣿⠗⠀⠀⠀
⠀⠀⠀⡏⠀⠀⠀⠀⠐⠀⠀⠀⢀⠤⣒⣥⡤⡤⠤⣄⡄⠈⢿⣷⣿⡿⠁⠀⠀⠀⠀⠀⠈⠄⣾⣷⣄⣤⣴⣾⣿⢿⠛⠛⠁⠀⠀⠀⠀
⠀⠀⢸⣆⠀⢀⡔⠁⢈⠎⠀⠀⣠⣾⡿⢹⣹⠉⠻⢷⣟⣇⠈⠿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⠟⠋⣷⣻⣿⣓⡦⡠⠱⢢⠀⠀
⠀⠀⠸⠺⠔⠋⢀⢠⠋⠀⡀⣰⢿⢉⣿⣿⣿⣧⣦⠈⠙⢎⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⢆⠀⠀⠀⠀⠀⢸⣽⣿⣏⡟⢷⢳⠀⠃⡇⠀
⠀⠀⠀⡇⠀⠀⢠⠃⠀⠸⠐⡏⡇⢾⣿⣿⣿⡿⣬⡇⠀⠘⢼⣇⠀⠈⠀⡀⠀⠀⠀⠀⠀⠂⠀⠀⠀⠀⣏⣿⣿⣯⣿⠀⢸⠀⠀⢸⠀
⠀⠀⠀⢥⠀⠀⠘⠀⠀⠀⠐⢿⡟⣼⣿⣿⣿⣷⣿⠇⠀⢠⢸⡿⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⠏⡡⡼⠅⠀⠸⡄
⠀⠀⠀⡇⠀⠀⠁⠀⠀⠀⠀⠈⢿⢿⣧⡙⠛⠛⠁⠀⠀⣠⣿⠃⠀⠀⠀⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠲⠾⡝⠁⠀⡀⠀⢇
⠀⠀⠀⡃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠐⠽⠤⢄⠤⠤⠞⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⡸
⠀⠀⠀⠵⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢡⠀⠀⠀⠀⠀⠀⠀⢀⠆
⠀⠀⠀⢀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠈⠂⠀⠀⠀⠀⠀⢄⠞⠀
⠀⠀⠀⠐⠀⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⢸⠁⠀⠀
⠀⠀⠠⡎⠀⠠⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣠⠤⠒⠤⠤⢔⠂⡤⠀⠀⠀⢸⠀⠀⠀
⠀⠀⢐⡇⠀⠀⠀⠀⠀⠘⢷⢄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢶⣆⠀⠀⠁⠀⡴⠑⠁⠀⠀⠀⣆⠀⠀
⠀⢀⠎⠀⠀⠀⠀⠀⠀⠀⠈⢻⣷⣤⡀⠀⠀⢀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠿⢠⣂⠜⠁⠀⠀⠀⢀⠞⠀⠀⠀
⠀⡌⠅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣿⣟⣦⡈⠒⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠁⠀⠀⠀⠀⠀⡆⠀⠀⠀⠀
⠸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⢿⣿⣶⣥⣈⠐⠀⠀⠀⠀⠀⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⣠⠣⣄⣀⡾⠐⠀⠀⠀⠀⠀⠀⠀
⣇⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠻⣿⣿⣽⣶⡤⣢⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⠋⠀⡤⡢⠟⠃⠀⠀⠀⠀⠀⠀⠀⠀
⠉⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠛⠿⢿⣿⣿⣿⣢⢄⣀⡀⡀⠀⠠⡤⡠⠔⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢿⣿⣯⣽⣿⣛⣍⢱⣱⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣙⣿⠻⡤⢿⣦⡾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣓⣯⣸⠿⡿⢟⠆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠊⠉⠀⠀⢠⡸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⡳⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡔⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⠖⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠁⠪⠺⡅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡿⣦⠀⠀⠀⠀⠂⠀⡄⠞⠱⡇⠀⠀⠀⠘⢿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡀⠀⠀⠀⠀⠀⢣⡀⠈⠹⡄⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣦⠀⠀⠀⠀⣏⣆⠀⠀⠘⠴⠠⠴⠗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠇⠀⢀⠀⢉⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠈⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀`

func Start(in io.Reader, out io.Writer) {
	scanner := bufio.NewScanner(in)
	for {

		fmt.Printf(PROMT)

		scanned := scanner.Scan() // read input from the user
		if !scanned {
			return
		}

		// var input string
		// x := true
		line := scanner.Text()

		// for x {
		// 	input = input + line
		// 	if line == "end" {
		// 		x = false
		// 	}
		// }

		l := lexer.New(line)
		p := parser.New(l)
		prog := p.ParseProgram()

		if len(p.Errors) != 0 {
			printParserErrors(out, p.Errors)
			continue
		}

		// io.WriteString(out, prog.String())
		// io.WriteString(out, "\n")

		// for {
		// 	tok := l.NextToken()
		// 	if tok.Type == token.EOF {
		// 		break // end of line
		// 	}
		// 	fmt.Printf("Type: %s, Literal: %s\n", tok.Type, tok.Literal)
		// }

		env := object.NewEnv()

		evaluated := evaluator.Eval(prog, env)
		if evaluated != nil {
			io.WriteString(out, evaluated.Inspect())
			io.WriteString(out, "\n")
		}

	}
}

func printParserErrors(out io.Writer, errors []string) {
	io.WriteString(out, "are u sure u did it rite?\n")
	io.WriteString(out, MEOW)
	io.WriteString(out, "\n")

	io.WriteString(out, " parser errors:\n")

	for _, msg := range errors {
		io.WriteString(out, "\t"+msg+"\n")
	}
}
